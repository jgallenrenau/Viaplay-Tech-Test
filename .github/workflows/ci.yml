name: CI

on:
  pull_request:
    branches: [ develop ]
    paths:
      - 'Viaplay/**'
      - '.swiftlint.yml'
      - '.github/workflows/**'
      - '!**/*.md'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Force run tests even if paths do not match'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Run Unit Tests
    runs-on: macos-15
    if: (startsWith(github.head_ref, 'feature/') || startsWith(github.head_ref, 'fix/')) || github.event.inputs.run_tests == 'true'

    env:
      SCHEME: Viaplay
      PROJECT: Viaplay/Viaplay.xcodeproj
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-
      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        working-directory: Viaplay
        run: swiftlint --strict

      - name: Build & Test (all tests with coverage)
        run: |
          # Run tests for Swift packages in dependency order
          # First: Independent packages (no dependencies)
          for package in Packages/DomainKit Packages/NetworkingKit Packages/StorageKit Packages/DSKit; do
            echo "Testing independent package: $package"
            cd "$package"
            swift test --enable-code-coverage
            cd ../..
          done
          
          # Second: Packages with dependencies
          for package in Packages/DataKit Packages/DetailFeature Packages/SectionsFeature; do
            echo "Testing dependent package: $package"
            cd "$package"
            swift test --enable-code-coverage
            cd ../..
          done
          
          # Run the main app tests
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -enableCodeCoverage YES \
            -skipMacroValidation \
            -only-testing:ViaplayTests \
            clean test

      - name: Generate Code Coverage Report
        run: |
          # Find the most recent xcresult file from Xcode tests
          XCRESULT_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" -type d -exec stat -f "%m %N" {} \; | sort -nr | head -1 | cut -d' ' -f2-)
          if [ -z "$XCRESULT_PATH" ]; then
            echo "No xcresult file found"
            exit 1
          fi
          echo "Using xcresult: $XCRESULT_PATH"
          xcrun xccov view --report --json "$XCRESULT_PATH" > coverage.json
          echo "Coverage report generated"

      - name: Verify Coverage Report
        run: |
          if [ ! -f coverage.json ]; then
            echo "Coverage report not found"
            exit 1
          fi
          echo "Coverage report verified: $(wc -l < coverage.json) lines"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult
          path: ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
