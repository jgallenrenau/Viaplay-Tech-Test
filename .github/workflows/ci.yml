name: CI

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Viaplay/**'
      - '.swiftlint.yml'
      - '.github/workflows/**'
      - '!**/*.md'
  push:
    branches: [ develop, 'feature/*', 'chore/*', 'fix/*' ]
    paths:
      - 'Viaplay/**'
      - '.swiftlint.yml'
      - '.github/workflows/**'
      - '!**/*.md'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Force run tests even if paths do not match'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Run Unit Tests
    runs-on: macos-15
    if: (startsWith(github.head_ref, 'feature/') || startsWith(github.head_ref, 'chore/') || startsWith(github.head_ref, 'fix/')) || github.event.inputs.run_tests == true

    env:
      SCHEME: Viaplay
      PROJECT: Viaplay/Viaplay.xcodeproj
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-
      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        working-directory: Viaplay
        run: swiftlint --strict

      - name: Build & Test (all tests with coverage)
        run: |
          # Clean Swift Package Manager cache to avoid dependency conflicts
          rm -rf ~/.swiftpm
          rm -rf ~/Library/Caches/org.swift.swiftpm
          
          # Clean up any existing xcresult file
          rm -rf TestResults.xcresult
          
          # Run ALL tests through Xcode to get comprehensive coverage
          # This includes SPM packages and main app tests
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -testPlan AllTests \
            -enableCodeCoverage YES \
            -skipMacroValidation \
            clean test \
            -only-testing:DataTests \
            -only-testing:DetailSectionIntegrationTests \
            -only-testing:DetailSectionUnitTests \
            -only-testing:DomainTests \
            -only-testing:NetworkingKitTests \
            -only-testing:SectionsIntegrationTests \
            -only-testing:SectionsUnitTests \
            -only-testing:StorageKitTests \
            -resultBundlePath TestResults.xcresult

      - name: Generate Code Coverage Report
        run: |
          # Use the specified xcresult file first
          if [ -d "TestResults.xcresult" ]; then
            XCRESULT_PATH="TestResults.xcresult"
            echo "Using specified xcresult: $XCRESULT_PATH"
          else
            echo "TestResults.xcresult not found, searching for alternatives..."
            # Fallback: Find the most recent xcresult file from Xcode tests
            XCRESULT_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" -type d -exec stat -f "%m %N" {} \; | sort -nr | head -1 | cut -d' ' -f2-)
            if [ -z "$XCRESULT_PATH" ]; then
              echo "No xcresult file found in DerivedData, trying current directory..."
              # Try alternative paths for GitHub Actions
              XCRESULT_PATH=$(find . -name "*.xcresult" -type d -exec stat -f "%m %N" {} \; | sort -nr | head -1 | cut -d' ' -f2-)
              if [ -z "$XCRESULT_PATH" ]; then
                echo "❌ No xcresult file found in any location"
                echo "Available files in current directory:"
                ls -la
                exit 1
              fi
            fi
            echo "Using found xcresult: $XCRESULT_PATH"
          fi
          
          # Verify the xcresult file exists and is valid
          if [ ! -d "$XCRESULT_PATH" ]; then
            echo "❌ xcresult file is not a directory: $XCRESULT_PATH"
            exit 1
          fi
          
          # Generate coverage report
          echo "Generating coverage report from: $XCRESULT_PATH"
          xcrun xccov view --report --json "$XCRESULT_PATH" > coverage.json
          echo "✅ Coverage report generated successfully"
          
          # Show coverage summary
          echo "📊 Coverage summary:"
          xcrun xccov view --report "$XCRESULT_PATH"

      - name: Verify Coverage Report
        run: |
          if [ ! -f coverage.json ]; then
            echo "Coverage report not found"
            exit 1
          fi
          echo "Coverage report verified: $(wc -l < coverage.json) lines"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          directory: ./
        continue-on-error: true

      - name: Verify Codecov Upload
        run: |
          echo "Checking if Codecov upload was successful..."
          if [ -f "coverage.json" ]; then
            echo "✅ Coverage file exists and is ready for upload"
            echo "📊 Coverage file size: $(wc -c < coverage.json) bytes"
          else
            echo "❌ Coverage file not found"
            exit 1
          fi

      - name: Upload xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult
          path: ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
